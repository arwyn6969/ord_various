import requests

# Define the asset symbol
asset = 'ONCHAINPUNK'

# Make a GET request to the xChain.io API
url = f'https://xchain.io/api/asset/{asset}'
response = requests.get(url)

# Check that the request was successful
if response.status_code == 200:
    # Get the asset information as a dictionary
    asset_info = response.json()

    # Extract the tele message tx hash from the description field
    description = asset_info['description']
    tele_message_tx_hash = description.split(';')[1].strip()

    # Print the asset information in a user-friendly format
    print(f'Asset Name: {asset_info["asset"]}')
    print(f'Asset Longname: {asset_info["asset_longname"]}')
    print(f'Asset ID: {asset_info["asset_id"]}')
    print(f'Tele Message TX Hash: {tele_message_tx_hash}')

    # Get broadcasts by the issuer's address
    issuer_address = asset_info['issuer']
    broadcast_url = f'https://xchain.io/api/broadcasts/{issuer_address}'
    broadcast_response = requests.get(broadcast_url)

    if broadcast_response.status_code == 200:
        broadcasts = broadcast_response.json()['data']
        matching_broadcast = None
        for broadcast in broadcasts:
            if broadcast['tx_hash'] == tele_message_tx_hash:
                matching_broadcast = broadcast
                break

        if matching_broadcast:
            print('Matching broadcast found:')
            print(f'TX Hash: {matching_broadcast["tx_hash"]}')
            print(f'Text: {matching_broadcast["text"]}')
        else:
            print(f'No matching broadcasts found for tele message tx hash: {tele_message_tx_hash}')

        print(f'Total Broadcasts by Issuer ({issuer_address}): {len(broadcasts)}')
    else:
        print(f'Error getting broadcasts: {broadcast_response.status_code} - {broadcast_response.reason}')

    print(f'Supply: {asset_info["supply"]}')

else:
    # Print an error message
    print(f'Error: {response.status_code} - {response.reason}')
